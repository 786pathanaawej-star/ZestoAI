import React, { useState, useMemo } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { usePantryStore } from '../store/pantryStore';
import PantryItemCard from '../components/Pantry/PantryItemCard';
import AddItemModal from '../components/Pantry/AddItemModal';
import { Plus, Search, Package } from 'lucide-react';

type FilterTab = 'All Items' | 'Expiring Soon' | 'Expired';

const PantryPage = () => {
  const { items, getExpiringItems, getExpiredItems } = usePantryStore();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [activeTab, setActiveTab] = useState<FilterTab>('All Items');
  const [searchTerm, setSearchTerm] = useState('');

  const filteredItems = useMemo(() => {
    let currentItems = [];
    if (activeTab === 'All Items') {
      currentItems = items;
    } else if (activeTab === 'Expiring Soon') {
      currentItems = getExpiringItems();
    } else {
      currentItems = getExpiredItems();
    }

    if (searchTerm) {
      return currentItems.filter(item =>
        item.name.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }
    return currentItems;
  }, [items, activeTab, searchTerm, getExpiringItems, getExpiredItems]);

  const tabs: FilterTab[] = ['All Items', 'Expiring Soon', 'Expired'];

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <h1 className="text-3xl font-bold text-gray-900">My Pantry</h1>
        <button
          onClick={() => setIsModalOpen(true)}
          className="bg-gradient-to-r from-orange-500 to-red-500 text-white px-6 py-3 rounded-xl hover:shadow-lg transition-all duration-200 flex items-center justify-center space-x-2"
        >
          <Plus className="w-5 h-5" />
          <span>Add Item</span>
        </button>
      </div>

      <div className="flex flex-col md:flex-row justify-between items-center gap-4">
        <div className="bg-white p-1 rounded-xl shadow-sm">
          {tabs.map(tab => (
            <button
              key={tab}
              onClick={() => setActiveTab(tab)}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${
                activeTab === tab ? 'bg-orange-100 text-orange-600' : 'text-gray-600 hover:bg-gray-50'
              }`}
            >
              {tab}
            </button>
          ))}
        </div>
        <div className="relative w-full md:w-auto">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
          <input
            type="text"
            placeholder="Search in pantry..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10 pr-4 py-2 w-full md:w-64 bg-white border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500"
          />
        </div>
      </div>

      <AnimatePresence>
        <motion.div
          layout
          className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6"
        >
          {filteredItems.map(item => (
            <PantryItemCard key={item.id} item={item} />
          ))}
        </motion.div>
      </AnimatePresence>

      {filteredItems.length === 0 && (
        <div className="text-center py-16 bg-white rounded-2xl shadow-sm">
          <Package className="w-16 h-16 text-gray-300 mx-auto mb-4" />
          <h3 className="text-xl font-semibold text-gray-800">No items found</h3>
          <p className="text-gray-500 mt-2">
            {searchTerm ? `No items match "${searchTerm}" in this category.` : `Your pantry is empty in this category.`}
          </p>
        </div>
      )}

      <AddItemModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} />
    </div>
  );
};

export default PantryPage;
